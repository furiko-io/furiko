name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  get-go-version:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.read-go-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - id: read-go-version
        name: Determine Go version from go.mod
        run: echo "::set-output name=version::$(grep "go 1." go.mod | cut -d " " -f 2)"

  golangci-lint:
    runs-on: ubuntu-latest
    needs:
      - get-go-version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.45.2
          args: --timeout=5m

  generate-lint:
    runs-on: ubuntu-latest
    needs:
      - get-go-version
    # NOTE(irvinlim): Need to operate in GOPATH in order for generate-groups.sh to succeed (see Makefile).
    steps:
      - uses: actions/checkout@v2
        with:
          path: "go/src/github.com/${{ github.repository }}"
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: Generate code
        run: make generate
        env:
          GOPATH: /home/runner/work/furiko/go
        working-directory: "go/src/github.com/${{ github.repository }}"
      - name: Check for differences
        run: git add . && git diff --exit-code --staged
        working-directory: "go/src/github.com/${{ github.repository }}"

  license-header-lint:
    runs-on: ubuntu-latest
    needs:
      - get-go-version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - run: make lint-license

  go-test:
    strategy:
      matrix:
        go-version: [ 1.17 ]
        platform: [ ubuntu-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run tests
        run: make test
      - name: Push code coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./combined.cov
        # Push code coverage only for one of the environments
        if: matrix.platform == 'ubuntu-latest'
